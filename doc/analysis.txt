analysis.txt
Detailed Analysis for the sci-booster Project

Contents
	File Structure/Modularisation
	Display Menu
	Introductory Page
	Login/Register Modal
		Signup as User
		Signup as Editor
		Signup as Owner
		Login
		User Type Privileges
	Flow Diagram Page
		Model Edit Options
		Page Information
		Page Options Buttons
			New Model / New Page Operations
		Flow Diagram
			Nodes
				Node Option Buttons
			Flows
				Flow Details Form
			Layout Considerations
	Javascript Coding Structure
		Flow Diagram Data Structures
		Flow Drawing Logic
	Flow Model Database Transactions

<h1>File Modularisation/Structure

	The sci-booster application will be available in the sci-booster
	folder of the main narayana-art.co.uk folder on the Fasthosts website.
	so sci-booster is the primary directory on GitHub. On the client development
	system the project is at home/robs/projects/narayana02/sci-booster.

	Within this directory the folders are to be as follows:

	sci-booster
		doc
		src
			html-pages
			js-scripts
			php-scripts
			images
		sci-booster.html (introductory page)


<h1>Display Menu
	The main menu appears on both pages of the sci-booster website.
	It is a basic bootstrap navbar with the following components:
	Icon Image
	Sci-Booster Title
	Menu
		Intro
		Flows
		Login/Register
		Narayana-Art

<h1>Login/Register Modal
	The login/register modal is loaded from the navigation bar from 
	each of the site pages.

	There are four types of user (status), "owner", "editor", "user", "unregistered".
	The default at login is "unregistered". The editor must be an
	invited user who is given an editor pass key to establish his 
	status.

	When the modal is first loaded, the possibilities are:
		User is "unregistered"
			The following options are presented:
				Login
				Signup As User
				Signup As Editor
				Signup As Owner - this option appears only once other
					than through the Admin page.

		User is already logged in and is a "user"
			The following options are presented:
				Logout
				Signup as Editor 

		User is already logged in and is an "editor"
			The following applies:
				Logout

		User is already logged in and is the owner
			The following applies:
				Logout

	The relevant options cause the following items to be displayed
	on the form:
		username
		editor passkey (when applicable)
		password

<h2>Signup as User

	When the sign-up as user button is clicked, the options
	are cleared and a form is displayed with the following
	fields:
		username
		password

	When submitted both are checked for null by the javascript.
	A message is displayed if the details are invalid.
	If they pass, the values are submitted using JSON to the
	add-user.php script.

	The add-user script expects the following JSON:
		request - "add user"
		username
		status
		password
		editor_key (null in this case)

	If these are transmitted successfully the scripts
	reports back "result: true"
	Else reports back "result: false, error: message"

	If there is an error, the javascript reports it on
	the form display.

	If there is no error, the dfm.userStatus is set to "user"
	and the modal is cleared.

<h2>Signup as Editor

	When the signup as editor option is chosen, the options
	are cleared and the following form is presented
		username
		password
		editor key

	The editor key is sent to potential editors by manual email
	and this is entered into the relevant field by the user.

	The encrypted value is stored in the editor_key table on 
	the server as a single row, with the single field "key"

	When submitted, the values are checked by javascript and errors
	reported back to the user.

	The add-user.php script receives the data as for the user,
	with errors being reported back to the form if necessary.

	If successful the dfm.userStatus is set to "editor" and the
	modal is cleared.

<h2>Signup as Owner
	This option is only displayed if the owner type
	is not already set. Otherwise, it is the same as for
	a user. The only difference in the data sent to the
	add-user script is that the status is set to "owner".

<h2>Login
	This option presents the following fields:
	username
	password

	These are validated by javascript, with errors reported
	back to the form.

	If the data is validated, it is transmitted to the login.php
	script which requires the username and password and which
	sends back the status (user type).

<h2>User Type Privileges

	The following privileges apply to user types:
		Unregistered:
			Search and lookup Flow Models 

		User:
			Search and lookup Flow Models 
			Edit own Flow Models

		Editor:
			Search and lookup Flow Models
			Edit any Flow Model
			Delete any Flow Model

		Owner:
			Search and lookup Flow Models
			Edit any Flow Model
			Delete any Flow Model
			Access Admin Page

<h1>Introductory Page
	The Introductory page is an HTML text presentation that introduces
	and summarises the flow model approach to learning and describing
	systems.

<h1>Flow Diagram Page
	see also: doc/FlowPage.svg

	Title:
	The page is headed by "Hierarchical Flow Diagrams".

	Search:
	The next item is the search input. This is search by keyword, flow 
	model title, page title, node label and flow label. This search is
	performed dynamically and produces a scrollable dropdown list. It
	is activated by the search button or by pressing the <return> key.

	If	nothing is found, this is reported by the user. 

<h2>Model Edit Options

	The model edit option buttons appear in their own panel toward
	the top of the screen. Which options are available depends on the
	user status and whether there is a model loaded.

	The conditions are as follows:
		If the user is unregistered:
			Display the message to indicate that the user should signup
			or login

		If the user status is "user":
			If no model is loaded:
				The New option is presented
			Else, if the user is NOT an author of the current model:
				The New option is presented
			Otherwise (ie: the user is an author):
				The New option is presented
				If not already in model edit mode, the Edit option is presented
				The Delete option is presented
				The Save option is presented

		If the user status is "owner" or "editor"
			If no model is loaded:
				The New option is presented
			Otherwise:
				The New option is presented
				If not already in model edit mode, the Edit option is presented
				The Delete option is presented
				The Save option is presented


		If the page is in edit mode, the Cancel button is displayed

		If there is a current page and the page is not at the top Level
		then the Zoomback button is displayed.

<h2>Page Information

	The page information appears toward the top of the page on the left.
	It includes the parent node name or "Top Level" if not applicable.

	Beneath the parent title is the title of the flow model page.

	Flow Page Details:
	Beneath this is the Details button which provides the facility to view
	or edit the further details of this page. Clicking it brings up the
	modal Flow Page Details form. If the user is the author or the user is
	an editor, the Edit button appears in this.

	The details consist of the following:
		Title
		Keywords
		Description
		Submit Button
		Authors
		References
		Number Of Pages
		Leave Button

	The Authors section produces its own list.

	The References section produces its own form Reference Details
	which contains a list of entries and the following input fields:
		Source
		Title
		Author
		Submit Button
		Leave Button

<h2>Page Options Buttons
	The page options buttons are New, Edit, Delete, Save
	for the logic See Above: Model Edit Options

	New:
	The Add option only applies for a new Flow Model, otherwise the
	facility to add a page for further definition is available at the
	node.
	
	When the Add button is pressed, the Flow Model Details appear as a 
	modal to be entered.

	Edit:
	The update button only appears when the Flow Diagram Page already
	contains content. It enables the editing of the drawing. Only the
	author and the editors can use this feature.

	Delete:
	This enables the deletion of the Flow Model or Flow Page with all
	its children. It is accompanied by a warning on a modal screen.
	This feature is only available to the editors/authors.

	Save:
	This saves the page/model and performs all necessary database
	updates.

	Cancel:
	This option is visible whilst page edit mode is in effect. It causes
	edit mode to be cancelled and the current drawing to be cleared
	from the stage.

<h3>New Model / New Page Operations

	When the New model button is clicked:
		If there is a current model:
			If the current model is in edit mode:
				Ask the user if they wish to save the current model
			
			Clear down the current model
			Reset the currentModelSet flag 
	
	Load the model details form, which contains the following fields,
	note that this is the same for a page as for the model. 

		HierarchicalId - set automatically
		Title
		Keywords
		Description

		The following fields only become visible when the details above
		are submitted. The title at least must be set by the user.

		Authors

		References
			Source
			Title
			Author

	The form is submitted section by section to the dfm.currentPageData object

	Also created is the dfm.FlowVisuals object for the page

	Once the user clicks the Leave button, dfm.modelEditMode is set

	Note that the same form is presented for details display, but with fields edit 
	disabled and the submit buttons concealed.


<h2>Flow Diagram

	The flow diagram consists of nodes (as boxes) and flows as arrowed
	lines connecting them.

<h3>Nodes

	When the stage is clicked the Node Details modal panel appears. This
	includes the following:
		Label:
		Node Number: (auto)
		Type: - selection ("Mechanism"/"Effect")
		Definition: (optional)
		Keywords: (optional)
		Hyperlink: (optional)
		Has Child Page: (auto)
		Submit Button
		Delete Button - this only appears when edit mode is set
		Leave Button

	When the submit button has been pressed, the node box appears at
	the position set when the stage was clicked.

	Each node is displayed with the following:
	Node Number
	Label 
	Option Buttons
		Details
		Hierarchical Definition Page
		Add Flow Link
		Hyperlink	

	The Details Button brings up the Node Details Modal panel, note that
	this is only editable if the user is an author or an editor, so the
	Submit button only appears in this case.

	The Hierarchical Definition Page brings up the flow diagram that defines
	the node flow in more detail.

	The Add Flow Link button brings-up the modal Flow Details panel. This is 
	described in the Flows section below

	This panel also includes Draw Flow and Edit Flow Drawing buttons.

	The Destination Node Number can be set to "open" to indicate no 
	particular output destination

	The Conversion Formulas Option has its own modal form Flow Conversion 
	Formulas for entering and editing formulae and their definitions.
	The form consists of:
		Scrollable List of Formulas/Definitions
		Input Fields
			Formula
			Definition
			Submit button
			Leave button

	Once the Flow Details form is submitted, the modal disappears and the 
	flow is	shown as a line connecting the source and destination nodes.

<h4>Node Option Buttons

	The node option buttons appear on the bottom of each node rectangle, they
	each have associated hover text and click events that identify the node
	to the event handlers.

	The Node Details button raises the Node Details modal when clicked and
	this is in edit mode, if edit mode is set, otherwise the Node Details are
	view only and the inputs are disabled.

	The Flow Link button causes the Flow Details modal to be displayed (with
	the source node, set to the relevant node, but editable). This is defined
	in more detail under Flows below.

	The Zoom Page button allows for the creation of a new page detailing
	a component node further, if the page does not already exist and edit
	mode applies. If it does apply, then the current page is first saved to
	the database. If edit mode is not in effect, then the zoomed page will
	be loaded if it exists.

	The Hyperlink button takes the user to the associated web page, if it has
	been defined.

<h3>Flows
	
	Flows can connect a source node to a destination node or a source node to open space.
	They are drawn as a line with arrow marks pointing from the source toward the destination.
	The label for the flow appears in a rectangle that the flow line is connected to on opposite
	sides. Clicking the label causes the flow details modal to be displayed.

<h4>Flow Details Form 

	This contains the following fields
		Label
		Source None
		Source Node Number
		Destination None
		Destination Node Number
		Keywords
		Definition
		Hyperlink
		Submit Details 
		Conversion Formulas
			Formula
			Description
			Submit Formula
		Draw button
		Dismiss button

	The form is loaded as a modal. The conversions formulas can be toggled and are
	presented as a list to be added to by submitting an entry. Clicking an entry
	on the list deletes it.

	The Draw button only appears once the details have been submitted. When this
	is clicked, the modal is cleared and the flow drawing session begins.

<h4>Drawing the Flow

	The flow is drawn by clicking the stage point by point, with a line drawn
	between the points. The points are indicated by circles which can be clicked
	to select them for dragging. To insert the label the user can double-click
	the stage. Instructions for these operations appear above the stage.

	A Flow Done button appears in the options section of the page. When this is
	pressed the system returns to nodeEditMode and the flow is represented without
	the corner point circles.

	The data for the visual flow is stored in page data as well as the visual data.

<h3>Layout Considerations

	To allow for mobiles, the minimum stage width should be set to 380px. If we have a maximum
	of 2 columns of nodes and a minimum flow length of 60px then allowing for three flow lengths
	(180px), we have 200px remaining for the width of the nodes, ie: 100px wide.

	There are 4 buttons across the width of the node, so these should each be 20px x 20px.

	In the case of both flows and nodes we should allow for 2 or 3 lines of text within the width.
	assuming we use 12px font, this is about 45px. adding this to the height of the buttons, we have
	65px (say 70px) for the height of each node. So allowing for flows (including those above the top
	and below the bottom node, we have:
		(70 + 60) * maxNodesVertical + 60 = stage height (say 550px)
	so maxNodesVertical = (550 - 60) / 130 =apx 4.
	so we adjust the stage height to 4 * 130 + 60 = 580.

	This gives us a maximum of 8 nodes on a page.

	As we scale the stage for greater widths, we adjust the node and flow widths accordingly, 
	up to a maximum of 2 times. So the max width of the stage should be 760px.

	Summary:
		Stage Min: 380 x 580px
		Stage Max: 760 x 580px
		Node Min: 100 x 70px
		Node Max: 200 x 70px
		Flow Min Length: 60px
		Buttons: 20px x 20px

<h1>Javascript Coding Structure
	The code for the flow model diagrams stage is separated from
	the other event code for the page. Where functions and data
	are likely to be re-used they are encapsulated in global
	objects in individual files.This approach does mean that multiple 
	script source references must be made in the HTML.

	All the global classes and instances are encapsulated in the 
	dfm {} application object

	Where useful, the class definitions are separated into individual
	source code files, with the declarations in the global namespace.

<h2>Flow Diagram Data Structures
	For the database model, see the relevant section in README.md.

	The primary decision for the structure of the flow model rests
	on the fact that one hierarchical page of a model is visible at a time.
	We must consider whether this is sufficient data to hold on the client
	and whether we should then use the server database to obtain additional
	information. This would also tie-in with the application of the Save
	button on the user interface.

	The decision is to use object-oriented code where possible, so the
	current page data and its methods are defined in a class to be
	instantiated in the main module.

	Flow Page Data - This is as follows:

		dfm.Node = class {
			constructor () {
				this.id = ""; // If known
				this.nodeNum = ""; // Auto
				this.x = 0;
				this.y = 0;
				this.label = "";
				this.type = ""; // (Mechanism/Effect)
				this.definition = "";
				this.keywords = "";
				this.hyperlink = "";
				this.hasChildPage = false;
			}
		}

		dfm.Flow = class {
			constructor() {
				this.id = null; // If known
				this.flowNum = "";
				this.source_node_num = 0;
				this.destination_node_num: = 0;
				this.label = "";
				this.label_x = 0;
				this.label_y = 0;
				this.drawing_group_x = 0;
				this.drawing_group_y = 0;
				this.arrow_points = [];
				this.points = [];
				this.definition = "";
				this.keywords = "";
				this.hyperlink = "";
				this.conversion_formulas = []; // [{formula: , definition: }]
			}
		}

		dfm.FlowPage = class {
			constructor() {
				this.id = ""; // If known
				this.hierarchical_page_id = "";
				this.title = "";
				this.description = "";
				this.authors = [];
				this.references = []; // [{source:, author:, title: }],
				this.keywords = "";
				this.nodes = []; // [Node objects]
				this.flows = []; // [Flow objects]
			}
		}

		dfm.FlowPageData = class {
			constructor() {
				this.id = null; // If known
				this.page = new FlowPage();
			}
		}
		
	The flow visual data can be calculated from the currentPageData and the
	stage dimensions and scale. The node and flow visual groups are contained
	in the following type of structure:

		dfm.FlowVisuals = class {
			constructor() {
				this.active = false;
				this.flowDrawMode = false;
				this.currentFlow = {} ; // As per flow definition
				this.currentFlowDrawing = {
					flowGroup: {}, // The Konva group images
					points: [
						{
							marker: {},// The Konva point marker circle
							line: {},// The Konva line object to the previous flowNode
						},
					],
					flowArrow: {}, // The Konva arrow line object
					graphicLabel: {
						rect: {}, // The Konva rectangle object
						text: {}  // The Konva text object
					}
				}
				this.nodeLayer = null;
				this.nodes = [
					{
						active: false/true,
						nodeNum: "",
						nodeGroup: {}// The 
					}
				]
				this.flows= [
					{
						active: ,
						flowNum: ,
						flowGroup: ,
						points: [{x:, y:}]
					}
				]
			}
		}

<h2>Flow Drawing Logic

	Add Mode:

	Once the user has submitted the flow details in the Flow Details Modal,
	the modal is cleared and a panel appears above the stage to indicate that
	flow draw mode is active. The user then clicks points on the stage to
	mark the path of the flow. The line click points can be edited with drag/drop.
	(note that node events should be suppressed during this process). 
	The user can double tap in order to insert the flow label. The flow label
	position is set relative to the position of the double click. The flow label
	is draggable.

	If a flow line is double-clicked the flow arrow is added to it, in the direction
	from source node to destination as follows:

		The nearest ends of the flow lines to the source and destination are used
		to determine whether the direction of the arrow is toward the 0 or final
		end of the points array. The legs are drawn using 
		/patternArt/Geo.js/perpendicularLine() to establish the arrow end points.

	The flow arrow can be deleted by double clicking it.
	
	Once the user is satisfied, he can click the flow drawing panel Flow Done button. 
	The flow drawing is then saved in the model and the editing points disappear.

	When the Flow Done button is clicked, the flow drawing details are first checked to
	ensure that the following have been set:
		Flow arrow
		At least least two flow points
		Flow label
	The user is informed if this is not the case.

	The raw data from the current flow editing session is extracted and transferred to
	the current flow details object, which is then inserted into the current page model
	of the application.

	Once this is done, the current flow drawing object graphics are destroyed and a flow
	image object is created for addition to the flow visuals class. 

	The node events are then reactivated.

	Edit Drawing Mode:

	When the user clicks the flow label, if the user has edit permissions,
	the option to edit the drawing is presented in the flow details modal along
	with the flow details.

	The flow details for the editor are loaded from the corresponding entry in
	the dfm.currentPage data and the modal form fields are editable.

	If the user clicks draw flow button then the modal is cleared and the flow is
	presented in it;s editable version with the point marker circles which are
	visible and active, these can be moved by drag/drop, or activated by click for 
	deletion. A click on the stage adds a click point and the connecting line at 
	that point. The features are then same as for a new flow line drawing.

	As with Add Mode, the component nodes are de-activated during this mode.

	Once the user has finished editing the flow, he can click the Flow Done button
	in the flow editing panel.

<h1>Flow Model Database Transactions

	Flow models are loaded and saved as pages, with the data being passed from
	the Javascript as a JSON object.

	The json object is as follows:
	{
		"flow_model_id": , // Auto Long Int, can be null
		"page" : 
		{
			"id": ,// May be null
			"hierarchical_id": "", // ie: 01020406 for a level four page. Note that the numbers (apart from the first)
				// are NodeNums, the first/top level is always "01"
			"title": "",
			"keywords": "",
			"authors": [""], // Username or Author
			"references": [
				{
					"source": "", // ie: "Web Page" or Publisher
					"title": "",
					"author": ""
				},
				..
			], // The sources of the information, ie: book, paper titles

			"nodes": [
				{
					"node_num" : "", // (ie: "01")
					"label": "",
					"type": "", // (Mechanism/Effect)
					"definition": "", // optional
					"keywords": "", // optional
					"hyperlink":, "", // optional a hypertext link to further information
					"has_child_page": // true/false
				},
				..
			],

			"flows" : [
				{
					"source_node_num": "", 
					"destination_node_num": "", // (optional)
					"label": "",
					"keywords": "", // (optional)
					"definition": "", // (optional)
					"conversion_formulas": [
						{
							"formula": "",
							"description": ""
						},
						..
					]
					"hyperlink": "" // (optional) a link to further information
					"drawing_group_x": 0,
					"drawing_group_y": 0,
					"label_x": 0,
					"label_y": 0,
					"arrow_points": [{x:, y:}]
					"points": [{x:, y:}]
				},
				..
			]
			
		}
	}


<h2>Adding a New Page
	The php routine receive-page.php first checks the flow_model_id, if this is null,
	it invokes the 
		addFlowModel function
			This first the page title to ensure that it is unique.
			This checks the hierarchical_id of the page, and if it is 01 it adds the page 
			title to the flow_model table and returns the flow_model_id.
	it then invokes the
		addPage function - which performs the following:
			Add the individual details to the page table, return the page_id
			Add the flow_model_page_link entry to its table		
			Process the authors and references lists into their appropriate tables
			checking whether they are to be added or inserted.
			Process the nodes and flows.